<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="ground_robot">

    <xacro:arg      name="namespace"       default="!!!"/>

    <!-- Parameters -->
    <!-- chassis geometry -->
    <xacro:property name="body_length"     value="0.4"/>
    <xacro:property name="body_width"      value="0.3"/>
    <xacro:property name="body_thickness"  value="0.1"/>

    <!-- drive wheel geometry -->
    <xacro:property name="drive_wheel_radius"    value="0.1"/>
    <xacro:property name="drive_wheel_width"     value="0.05"/>
    <xacro:property name="drive_wheel_x_offset"  value="0.05"/>

    <!-- caster geometry -->
    <xacro:property name="caster_radius"   value="0.05"/>
    <xacro:property name="caster_width"    value="0.02"/>

    <!-- Base frame -->
    <link name="base_link"/>
    <joint name="base_to_chassis" type="fixed">
        <parent link="base_link"/>
        <child  link="chassis_link"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <!-- Wheel macro: generates wheel link + joint -->
    <xacro:macro name="wheel" params="name parent_link xpos ypos radius width">
      <link name="${name}">
        <visual>
          <!-- rotate cylinder so its axis is along Y -->
          <origin xyz="0 0 0" rpy="1.5708 0 0"/>
          <geometry>
            <cylinder length="${width}" radius="${radius}"/>
          </geometry>
          <material name="${name}_material">
            <color rgba="0.1 0.1 0.1 1.0"/>
          </material>
        </visual>
        <collision>
          <origin xyz="0 0 0" rpy="1.5708 0 0"/>
          <geometry>
            <cylinder length="${width}" radius="${radius}"/>
          </geometry>
        </collision>
        <inertial>
          <mass value="0.5"/>
          <inertia ixx="0.0005" ixy="0.0" ixz="0.0"
                  iyy="0.0005" iyz="0.0"
                  izz="0.0005"/>
        </inertial>
      </link>
      <joint name="${name}_joint" type="continuous">
        <parent link="${parent_link}"/>
        <child  link="${name}"/>
        <!-- lift wheel so it sits on ground -->
        <origin xyz="${xpos} ${ypos} ${radius}" rpy="0 0 0"/>
        <axis   xyz="0 1 0"/>
      </joint>
    </xacro:macro>

    <!-- Chassis link -->
    <link name="chassis_link">
      <visual>
        <!-- lift chassis so it's centered on wheels -->
        <origin xyz="0 0 ${drive_wheel_radius + body_thickness/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${body_length} ${body_width} ${body_thickness}"/>
        </geometry>
        <material name="chassis_material">
          <color rgba="0.6 0.6 0.9 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 ${drive_wheel_radius + body_thickness/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${body_length} ${body_width} ${body_thickness}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="2.0"/>
        <inertia ixx="0.03" ixy="0.0" ixz="0.0"
                iyy="0.04" iyz="0.0"
                izz="0.05"/>
      </inertial>
    </link>

    <!-- Differential-drive wheels, shifted backward -->
    <xacro:wheel name="wheel_left"  parent_link="chassis_link"
                xpos="${-drive_wheel_x_offset}" ypos="${(body_width/2 + drive_wheel_width/2)}"
                radius="${drive_wheel_radius}" width="${drive_wheel_width}"/>
    <xacro:wheel name="wheel_right" parent_link="chassis_link"
                xpos="${-drive_wheel_x_offset}" ypos="${-(body_width/2 + drive_wheel_width/2)}"
                radius="${drive_wheel_radius}" width="${drive_wheel_width}"/>

    <!-- Caster wheel link -->
    <link name="caster_link">
      <visual>
        <!-- orient cylinder axis along Y for rolling -->
        <origin xyz="0 0 0" rpy="1.5708 0 0"/>
        <geometry>
          <cylinder length="${caster_width}" radius="${caster_radius}"/>
        </geometry>
        <material name="caster_material">
          <color rgba="0.3 0.3 0.3 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="1.5708 0 0"/>
        <geometry>
          <cylinder length="${caster_width}" radius="${caster_radius}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="0.1"/>
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
                iyy="0.0001" iyz="0.0"
                izz="0.0001"/>
      </inertial>
    </link>
    <joint name="caster_wheel_joint" type="continuous">
      <parent link="chassis_link"/>
      <child  link="caster_link"/>
      <!-- place caster at front of chassis, sitting on ground -->
      <origin xyz="${body_length/2 - caster_radius} 0 ${caster_radius}" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
    </joint>

    <!-- Laser sensor link -->
    <link name="laser_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
        <material name="laser_marker">
          <color rgba="1 0 0 1"/>
        </material>
      </visual>
    </link>
    <joint name="laser_joint" type="fixed">
      <parent link="chassis_link"/>
      <child  link="laser_link"/>
      <origin xyz="0.2 0 ${drive_wheel_radius + body_thickness/2}" rpy="0 0 0"/>
    </joint>

    <!-- Gazebo GPU LIDAR plugin -->
    <gazebo reference="laser_link">
      <sensor name="laser" type="gpu_lidar">
        <gz_frame_id>$(arg namespace)/laser_link</gz_frame_id>
        <update_rate>10.0</update_rate>
        <topic>/model/$(arg namespace)/scan</topic>
        <ray>
          <scan>
            <horizontal>
              <samples>640</samples>
              <resolution>1</resolution>
              <min_angle>-0.5236</min_angle>
              <max_angle>0.5236</max_angle>
            </horizontal>
            <vertical>
              <samples>1</samples>
              <resolution>0.01</resolution>
              <min_angle>0</min_angle>
              <max_angle>0</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.12</min>
            <max>3.5</max>
          </range>
        </ray>
        <always_on>1</always_on>
        <visualize>true</visualize>
      </sensor>
    </gazebo>

    <gazebo>
      <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
        <ros>
          <namespace>$(arg namespace)</namespace>
        </ros>

        <left_joint>wheel_left_joint</left_joint>
        <right_joint>wheel_right_joint</right_joint>
        <wheel_separation>${body_width + drive_wheel_width}</wheel_separation>
        <drive_wheel_radius>${drive_wheel_radius}</drive_wheel_radius>
        <odom_publish_frequency>50</odom_publish_frequency>
      </plugin>

      <plugin
        filename="gz-sim-joint-state-publisher-system"
        name="gz::sim::systems::JointStatePublisher">
          <topic>/model/$(arg namespace)/joint_state</topic>
      </plugin>

      <plugin
        filename="gz-sim-pose-publisher-system"
        name="gz::sim::systems::PosePublisher">
        <publish_link_pose>true</publish_link_pose>
        <use_pose_vector_msg>false</use_pose_vector_msg>
        <static_publisher>true</static_publisher>
        <static_update_frequency>1</static_update_frequency>
      </plugin>

      <plugin
        filename="gz-sim-odometry-publisher-system"
        name="gz::sim::systems::OdometryPublisher">
        <odom_frame>$(arg namespace)/odom</odom_frame>
        <robot_base_frame>$(arg namespace)</robot_base_frame>
      </plugin>
    </gazebo>
</robot>
